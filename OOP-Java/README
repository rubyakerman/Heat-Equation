=============================
=      File description     =
=============================
file DirectoryProcessor.java - 
this class is the main class, hence it runs the whole program:
 * parse the command file by ParseCommandFile
 * catch & take care of exceptions
 * create filters\orders by filter\order factory
 * create SubSections Respectively
 * take care of printing the output as required

 file SubSection,java - 
 * this class represents a sub-section of the command file, each one consists of a specific
 * type of Filter, Order and its own warnings.
 
 file Filter.java - 
 *Filter interface represents a filter of files
 * we can filter them by a specific filter & checks what files passed the filter
 
 file Order.java - 
 * this interface represents an order as object has to define comparator
 * and getOrderedFiles method which take care we will get a specific order from each class uses it.
 
 file FilterFactory.java
 * this class is the factory creates filters by type & parameters we got as strings
 * it checks weather the filter's name\parameters are as requested,
 * otherwise throw new FilterException
 
 file PropertiesFilter,java - 
 * this class represents the properties filters.
 * such as: Writable,  Hidden and Executable.

 file Executable.java extends PropertiesFilter implements Filter
  * this class is a Filter class that filters files has executable permissions.

  file Hidden.java extends PropertiesFilter implements Filter
   *this class is a Filter class that filters hidden files.

 file Writable.java extends PropertiesFilter implements Filter
 * this class is a Filter class that filters files has writable permissions.

 file SizeFilter.java - abstract class SizeFilter implements Filter
 * this class represents the size filters.
 * such as: greater_than,  smaller_than and between.
	
file GreaterThan.java extends SizeFilter implements Filter	
 * this class represents a greater_than filter.
 * it filters file its size is greater than argument we got from user
 
 file Between.java extends SizeFilter implements Filter
  * this class represents a between filter.
  * it filtered file its size is between the argument we get from user
	
file smallerThan.java extends SizeFilter implements Filter
 * this class represents a smaller_than filter.
 * it filters file its size is smaller than argument we got from user
 
 file ValuesFilter.java abstract class ValuesFilter implements Filter
 * this class represents the values filters.
 * such as: contains,  file, prefix, and suffix.

file Suffix.java extends ValuesFilter implements Filter
  * this class is suffix filter, filters files by suffix

  file File.java extends ValuesFilter implements Filter
  *  * this class is filter class, filters files by their names (filter file)

  file Contains.java extends ValuesFilter implements Filter
   * this class is contains filter, filters files by contains some string

   file All.java implements Filter
  * this class is type of filter, which is not filtering any file at all.

  file FilterException.java extends Exception
   * this class represents an exception occurred inside a specific filter
 * of a specific sub-section
 
 file OrderFactory.java
 * this class is the factory creates filters by type & parameters we got as strings
 * it checks weather the filter's name\parameters are as requested, otherwise
 
 file Abs.java implements Order, Comparator<java.io.File >
  * this class orders files by its abs order

  file SizeOrder.java implements Order, Comparator<java.io.File>
   * this class ordered files by its sizes

   file Type.java implements Order, Comparator<java.io.File>
  * this class orders class by its type

  file OrderException.java extends Exception
   * this class represents an exception thrown whenever error type 1 occurs
   * inside the command file strings of orders
 
 =============================================================================================================


===========================================
=      Design & Implementation Issues     =
===========================================
1.Explain all your design choices in detail.

2. Describe the exceptions hierarchy you used in order to handle errors in the program.
Explain the considerations that made you choose that specific design.

3. How did you sort your matched files? Did you use a data structure for this purpose?
If so, what data structure and why?

the program designed to be as modular as posible, each filter has its own class, each group of
filters with a "ground extends" has an abstract father class they extends (for EX: SmallerThan & 
GreaterThan are both extends SizeFilter who implements Filter class) so common mechanism will take
its place thru abstract classes.

the same hierarchy was built for Order.

we uses the factory design pattern as well (filter\order factory classes).

as you can see, we built 3 custom Exceptions:
FilterException
OrderException
CommandFileProcessingException

FilterException\OrderException - each one of them uses to check out weather error occurs (type 1)
so if we detect an error while the factory class creating Order\Filter we throw it to the main class
 that take care of this by catching & printing warnings according to the specific line it happaned.
 
CommandFileProcessingException - is thrown by the ParseCommandFile class in case the command file
is not in the structure it suppose to be (error type 2).

for the matched files we us an array of strings, as it is very clearly way & we know the lengh
we want to use so we dont need extra flexibility.



